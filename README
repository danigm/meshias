1. Introduction
---------------

Meshias is an implementation of AODV for mesh networks. To use it, you need to
need to compile it and then configure it and finally run it. Here we document
the whole process.

2. Compilation and installation
-------------------------------

To be able to compile Meshias you need a recent version of the linux kernel,
cmake and the headers for libnl. If you use debian or a debian derivative:

    sudo apt-get install libnl-dev cmake build-essential

Now, in order to compile meshias, you need to enter the src/ directory and
compile it by executing the following commands:

    cd src/
    cmake .
    make

And then, we install meshias in the system:

    sudo make install

3. Usage
--------

At the moment, meshias is highly experimental, and it's not prepared to be used
but for testing. The first thing to do is set up the interface that will be
working in the mesh network. if it's a wifi interface (which is most probably
the case), we need it to work in Ad-Hoc mode. This mode can be set up in
different ways depeding on the driver of your network card, for example in
atheros cards you do this:

    sudo wlanconfig ath0 destroy
    sudo wlanconfig ath0 create wlandev wifi0 wlanmode Ad-Hoc

The first commands is optional and only needed if the atheros interface was
already created, which is the case by default. The second one creates the
interface and sets it up in Ad-Hoc mode. You can check that the interface is
correctly set up in Ad-Hoc mode with the iwconfig command, which should say
"Mode: Ad-Hoc", as in this example:

    sudo iwconfig ath0
    ath0      IEEE 802.11g  ESSID:""  Nickname:""
            Mode:Managed  Channel:0  Access Point: Not-Associated
            Bit Rate:0 kb/s   Tx-Power:16 dBm   Sensitivity=1/1
            Retry:off   RTS thr:off   Fragment thr:off
            Encryption key:off
            Power Management:off
            Link Quality=0/70  Signal level=-96 dBm  Noise level=-96 dBm
            Rx invalid nwid:1836  Rx invalid crypt:0  Rx invalid frag:0
            Tx excessive retries:0  Invalid misc:0   Missed beacon:0

The interface which will be used for the mesh network is now created, but now
we need to bring it up, sets its ip address and network mask. For example if
we want to have ip address 192.168.0.2 and all the machine have ips of the type
192.168.0.X, this is the command that we need to execute:

    sudo ifconfig ath0 192.168.0.2 netmask 255.255.255.0 up

We can check that this command worked properly by executing the following
command, which should let us see that the interface is up and have the correct
ip address and network mask, showing an output similar to the one shown in this
example:

    sudo ifconfig ath0
    ath0      Link encap:Ethernet  HWaddr de:ad:be:ef:de:ad:be
            inet addr:192.168.6.2  Bcast:192.168.6.255  Mask:255.255.255.0
            inet6 addr: fe80::223:4eff:fe3e:2851/64 Scope:Link
            UP BROADCAST MULTICAST  MTU:1500  Metric:1
            RX packets:0 errors:0 dropped:0 overruns:0 frame:0
            TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
            collisions:0 txqueuelen:0
            RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

When we brought up the ath0 network interface, a new route should have been
added automatically to the routing table, which should contain an entry similar
to the following one:

    sudo route -n
    Kernel IP routing table
    Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
    192.168.0.0     0.0.0.0         255.255.255.0   U     0      0        0 ath0

Now we need to set up iptables to let meshias capture the traffic:

    sudo iptables -t filter -A OUTPUT -o ath0 -j NFQUEUE --queue-num 0

The above iptables rule will capture the outgoing traffic in your machine and
move the captured packets to the netfilter queue number 0. Meshias will read the
packets from that queue, and it will check if there is a route for the packet's
IP address destination. If there's a route, meshias will let packet be sended,
or else it will try to find a route.

This iptables will only capture the traffic going out through ath0 network
interface. We have assumed here in this example this is the interface working
with the mesh network, but if you want to setup you need to replace "ath0" with
the name of your interface in this and the following commands.

Another two iptables are needed for meshias to work:

    sudo iptables -t filter -A INPUT -i ath0 -j NFQUEUE --queue-num 0
    sudo iptables -t filter -A FORWARD -i ath0 -j NFQUEUE --queue-num 0

These first of these two rules will allow meshias capture incoming traffic to be
able to reset some timers for timeouts, whose packets will be send to nefilter 
queue number 1. The second rule captures the packets for which this machine acts
as a router, and will send them to netfilter queue number 2, allowing meshias
again to reset some timers for timeouts.

Before being able to run meshias we also need to tell the kernel to act as a
router forwading packets whose destination ip is not our machine but
another machine for which we have an entry in the routing table. This can be
done with the following command:

    sudo echo 1 > /proc/sys/net/ipv4/ip_forward

Finally, we need to start meshias by simply executing the following command:

    sudo meshias ath0

Now meshias will be showing its output in this terminal so we need to open a new
terminal and work from there.

If we have another machine connected to the mesh network with another instance
of meshias running, we can test that meshias is working by issuing pinging to
it's ip address (in this example, this ip is 192.168.0.1):

    ping 192.168.0.1 -c 5
    PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data.
    64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=55.161 ms
    64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=48.213 ms
    64 bytes from 192.168.0.1: icmp_seq=3 ttl=64 time=47.137 ms
    64 bytes from 192.168.0.1: icmp_seq=4 ttl=64 time=49.168 ms
    64 bytes from 192.168.0.1: icmp_seq=5 ttl=64 time=48.175 ms

    --- 192.168.0.1 ping statistics ---
    5 packets transmitted, 5 received, 0% packet loss, time 3999ms
    rtt min/avg/max/mdev = 47.137/49.170/55.161/1.029 ms

After pinging to the machine, meshias output in the first terminal should look
like this:

    ....                                   
    [1] A packet was captured by nfqueue.
    STOLEN: Finding route for 192.168.0.1...
    route for 192.168.0.1 found, packet previously stolen accepted
    ACCEPT: packet for 192.168.0.1, route known
    ACCEPT: packet for 192.168.0.1, route known
    ACCEPT: packet for 192.168.0.1, route known
    ACCEPT: packet for 192.168.0.1, route known

As a result of meshias work, a new route to the routing table should have been
added to the routing table:

    route -n
    Kernel IP routing table
    Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
    192.168.0.1     192.168.0.1     255.255.255.255 U     0      0        0 ath0
    192.168.0.0     0.0.0.0         255.255.255.0   U     0      0        0 ath0

And this is how meshias works in essence.
