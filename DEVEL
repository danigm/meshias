1. Introduction
---------------

In this file you will find implementation details, and in general information
for developers who want to know how meshias works internally.

First we want to implement AODV, and then even add some changes to it and
improve it. AODV stands for Ad hoc On-Demand Distance Vector Routing, and it's a
protocol for converting an Ad-hoc network in a mesh network in which each node
doesn't necesarily be directly connected to the node he wish to communicate
with, but instead it only needs to have a path of connected intermediate nodes
between it and the other communicating node.

2. Libraries
------------

To start with this project, we have to know what we'll be using and why:

 * libnetfilter_queue,
 for capturing and filtering packets. This way we inspect each packet and
 determine if its route is known, in which case we let the packet continue is
 usual path, or if the route for the destination ip is not known, then we retain
 and buffer the packet and in the same time we try to find a route for it using
 AODV. When we find the route it's added to the systems route table and after
 that we let the packet continue its way. The kernel will find the route in the
 route table and send it accordingly. 

 * libnl,
 for communicating with the kernel for route management purposes, like getting
 the route table and updating and modifing it. In this case we will use libnl
 instead of using directly netlink because netlink is too much low level for
 what we need.

 * udp sockets
 for sending AODV packets for route management via port 654 UDP, and
 libnetfilter_queue to receive the packets coming from other ips.

 * unix sockets
 for the communication between the daemon and the daemon-tools.

 * conntrack alarms,
 for managing timeouts of AODV protocol.

3. Overview of AODV
-------------------

AODV protocol is described in RFC 3561. Route Requests (RREQs), Route Replies
(RREPs) and Route Errors (RERRs) are the message types defined by AODV. These
message types are received via UDP in port 654.

fields for each route table entry:
 * dest ip addr
 * prefix size (for subnets)
 * dest seq nº
 * valid dest seq nº flag
 * other flags: valid/invalid, repairable/being repared
 * network iface
 * hop count (to reach dest)
 * next hop
 * list of precursors
 * lifetime (expiration or deletion time of the route)

buffer of RREQs. This buffer is there so that a rreq is processed and
broadcasted only once and thus no loops happen. It contains:
 * orig addr
 * RREQ ID
 * lifetime (each entry remains stored for PATH_DISCOVERY_TIME)

We also needd to store the current RREQ ID for this machine.

common vars:
(copiar del RFC)

   Parameter Name           Value
   ----------------------   -----
   ACTIVE_ROUTE_TIMEOUT     3,000 Milliseconds
   ALLOWED_HELLO_LOSS       2
   BLACKLIST_TIMEOUT        RREQ_RETRIES * NET_TRAVERSAL_TIME
   DELETE_PERIOD            see note below
   HELLO_INTERVAL           1,000 Milliseconds
   LOCAL_ADD_TTL            2
   MAX_REPAIR_TTL           0.3 * NET_DIAMETER
   MIN_REPAIR_TTL           see note below
   MY_ROUTE_TIMEOUT         2 * ACTIVE_ROUTE_TIMEOUT
   NET_DIAMETER             35
   NET_TRAVERSAL_TIME       2 * NODE_TRAVERSAL_TIME * NET_DIAMETER
   NEXT_HOP_WAIT            NODE_TRAVERSAL_TIME + 10
   NODE_TRAVERSAL_TIME      40 milliseconds
   PATH_DISCOVERY_TIME      2 * NET_TRAVERSAL_TIME
   RERR_RATELIMIT           10
   RING_TRAVERSAL_TIME      2 * NODE_TRAVERSAL_TIME *
                            (TTL_VALUE + TIMEOUT_BUFFER)
   RREQ_RETRIES             2
   RREQ_RATELIMIT           10
   TIMEOUT_BUFFER           2
   TTL_START                1
   TTL_INCREMENT            2
   TTL_THRESHOLD            7
   TTL_VALUE                see note below

This file is by any means not complete. If you want to read more information
about the protocol you can READ RFC 3561,which can be found in this same
directory with the name rfc3561.txt.

4. Setting up the development environment
-----------------------------------------

4.1 Compiling with debug symbols
--------------------------------

If we want to be able to debug meshias with gdb, we need to compile meshias in
debug mode. We can do that by telling it to cmake:

    cmake -DCMAKE_BUILD_TYPE:STRING=debug .
 
That's sort of equivalent to what a typical ./configure --enable-debug does. After
executing that command, we need to rebuild meshias by executing:

    make clean
    make

And now the new meshias executable is ready, so you can have fun debugging it!

4.2 Keeping the network clean
-----------------------------

There are some daemons that send packets to the network, and when we are
debugging meshias we most likely want to control all the packets send to the
mesh network, so we have to stop those daemon that send undesired packets.
One of them is avahi. If at some point you start seing a lot of "ultraseek-http"
packets characterized by being a broadcast packets with a destination 8765,
which you can see when you are capturing them with wireshark for example.
Instead of finding who is the process culprit which sending those packets, we
can do the lazy man' solution, which is as simple as just block those packets:

    iptables -t filter -A OUTPUT -o ath0 -p udp --dport 8765 -j DROP
    iptables -t filter -A INPUT -i ath0 -p udp --sport 8765 -j DROP

Those two iptables rules should be the first ones you add to iptables, otherwise
they won't have any effect. You still stop the avahi-daemon which sends those
packets though, just in case:

    /etc/init.d/avahi-daemon stop

4.3 Testing meshias with only one machine
-----------------------------------------

4.3.1 Introduction
------------------

For testing meshias, you need at least two machines that act as nodes of the
network. That's a problem if you want to be able to hack or test meshias when
you are in some random place with your laptop as your only physical device.

The solution is using virtual machines. I'll explain here how to use VirtualBox
to easily create a virtual network between your host machine and a Debian guest.
There are other open source virtual machines available, but I chose VirtualBox
because it doesn't need your processor to have VT-X extensions so it works even
in an Intel Atom, and because VirtualBox has a nice and easily configurable UI.

4.3.2 Setup
-----------

We need at least VirtualBox 2.2.0 [1]  (which is in Beta 2 at the moment of writting 
this) because that version brings the new feature of "host-only" guest network
virtual interfaces. There's a VirtualBox Debian Image [2] available for download 
with everything already configured to be able to work as a virtual node.

So the first thing you need is to download and install VirtualBox [1]. After that,
you also need to download 7zip package suppport because that's the format in which
the Debian image is compressed:

    apt-get install p7zip-full

Next step is to download the Debian image [2]. Now you can extract it with the 
following command:

    7z e meshias.7zip

This will create two files, the meshias.vdi image (about 1.8Gb) which contains
the virtual hard disk with debian installed, and meshias.xml which contains the
configuration for the VirtualBox machine. To easily install those two we also
need a helper program, register image [3]. Once downloaded, you can uncompress
it and then execute it to install the VirtualBox image:

    tar zxf registerimage-1.0.4.tar.gz
    cd registerimage-1.0.4/
    python registerimage-1.0.4.tar.gz ../path/to/meshias.xml ../path/to/meshias.vdi

This guest is configured with two network interfaces: eth1 and eth2. eth1 is a
host-only net interface which connects to a loopback interface that VirtualBox
creates in the host called vboxnet0. The guest is configured with the IP address
192.168.5.2, but you need to setup an ip address in your host, for example
192.168.5.1:

    ifconfig 192.168.5.1 vboxnet0 up
    
After this, when executing the guest, you will be able to ping it:

    ping 192.168.5.2 -c 1
    PING 192.168.5.2 (192.168.5.2) 56(84) bytes of data.
    64 bytes from 192.168.5.2: icmp_seq=1 ttl=64 time=4.24 ms

    --- 192.168.5.2 ping statistics ---
    1 packets transmitted, 1 received, 0% packet loss, time 0ms
    rtt min/avg/max/mdev = 4.245/4.245/4.245/0.000 ms

Meshias will run in this virtual network between the host and the guest. This
virtual network works as a normal wired network but wired internally inside
your computer between your physical machine (the host)  and the virtual machine
(the guest). As meshias works at IP level, it works in any kind of networks:
wired, wireless, even virtual networks like this one.

The other interface in the gest debian operative system is eth2. This interface
is configured via NAT, which is the default configuration for network interfaces
in VirtualBox. This way, if your host machine has internet access, the guest
will have it too if needed. This network interface is also configured as a
secure way to connect via ssh from the host to the guest, because the VirtualBox
machine has been configured to do port forwading from the guest port 22 to the
host port 2222.

The guest has a minimalistic Debian configuration; it has barely what you need to
run meshias. It hasn't got a graphical interface installed, so it
works in console mode. The virtual  machine is configured with 64MB of RAM, but
when running it actually uses only about 10-20MB.

The guest is configured so you don't actually need to work within
VirtualBox, but always from your host operative system "remotely" using ssh as
have been said previously. 

You can connect to your guest this way:

    ssh debian@localhost -p 2222

The password for root is root, and the password for the user debian is.. debian.
Inside debian's home, you've got the directory meshias/ where a more or less
recent version of meshias bazaar branch resides and is already compiled, ready
to be used.

Here we can see the network scheme of the virtualbox configuration between
the guest and the host:

   -------------------------------------------------
   .  Host                                         .
   .                     ---------------------     .
   .                     |   Guest           |     .
   .                     |                   |     .
   .  vboxnet0<-----MESH----->eth2           |     .
   .  192.168.5.1        |    192.168.5.2    |     .
   .                     |                   |     .
 ---- >real ifaces<--NAT----->eth1           |     .
   .                     |                   |     .
   .                     ---------------------     .
   .                                               .
   -------------------------------------------------

You might want to copy files from the host to the guest. The Virtual Machine
comes with a shared directory configured so that you can see your host directory
/home/edulix in the guest directory /home/debian/user. You probably want to
change that share because chances are that you don't have such  a directory in
your host, you can do that by using the options in the "Directories > Shared
Directories..." menu in VirtualBox.

Other than that, you can follow the instructions for a typical meshias setup to
make meshias work in the guest. You can also add more guests, and connect them
to the host-only network. The host and all the guests will be neighbours in this
virtual network. To add a new guest you just need to duplicate the vdi debian
image and rerun the python script which installed the guest.

[1] http://download.virtualbox.org/virtualbox/2.2.0_BETA2/
[2] http://sugus.eii.us.es/~edulix/meshias.7zip
[3] http://download290.mediafire.com/lbm13hdyj2mg/tymm2hjnyej/registerimage-1.0.4.tar.gz
